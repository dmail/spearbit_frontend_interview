import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import FolderIconSvg from "./folder_icon";
import FileIconSvg from "./file_icon";
import ArrowIconSvg from "./arrow_icon";
import React from "react";

const inter = Inter({ subsets: ["latin"] });

interface FileData {
  name: string;
  type: "folder" | "file";
  children?: FileData[];
}

interface FolderProps {
  path: string[];
  name: string;
  children: FileData[];
}

interface FileProps {
  path: string[];
  name: string;
}

const backendResponseJson = [
  {
    name: "src",
    type: "folder",
    children: [
      {
        name: "data",
        type: "folder",
        children: [
          {
            name: "index.js",
            type: "file",
          },
        ],
      },
      {
        name: "index.js",
        type: "file",
      },
      {
        name: "index.css",
        type: "file",
      },
    ],
  },
  {
    name: "state.ts",
    type: "file",
  },
];

const Folder = ({ name, path, children }: FolderProps) => {
  const [isExpanded, setIsExpanded] = React.useState(true);

  return (
    <div className={styles.folder}>
      <div
        onClick={() => {
          setIsExpanded(!isExpanded);
        }}
        className="folder_info"
      >
        <span>
          <ArrowIconSvg opened={isExpanded} />
        </span>
        <span className={styles.folder_icon}>
          <FolderIconSvg />
        </span>
        <span className={styles.folder_name}>{name}</span>
      </div>
      {isExpanded && (
        <div className={styles.folder_content}>
          {children.map((child) => {
            if (child.type === "folder") {
              return (
                <Folder
                  key={child.name}
                  path={[...path, child.name]}
                  name={child.name}
                >
                  {child.children}
                </Folder>
              );
            }
            return (
              <File
                key={child.name}
                path={[...path, child.name]}
                name={child.name}
              />
            );
          })}
        </div>
      )}
    </div>
  );
};

const File = ({ path, name }: FileProps) => {
  return (
    <div
      onClick={() => {
        console.log(path.join("/"));
      }}
      className={styles.file}
    >
      <span className={styles.file_icon}>
        <FileIconSvg />
      </span>
      <span className={styles.file_name}>{name}</span>
    </div>
  );
};

export default function Home() {
  const rootDirectoryContent = backendResponseJson;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <Folder path={[]} name="/">
            {rootDirectoryContent}
          </Folder>
        </div>
      </main>
    </>
  );
}
